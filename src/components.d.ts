/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface LanderAnimate {
        "rotate": number;
        "type": string;
    }
    interface LanderBlock {
        "backgroundcolor": string;
        "backgroundimage": string;
        "columns": string;
        "height": string;
        "hint": string;
        "lg": string;
        "margin": string;
        "md": string;
        "narrow": boolean;
        "padding": string;
        "sm": string;
        "xl": string;
    }
    interface LanderButton {
        "colour": string;
        "outline": boolean;
        "size": string;
        "test": string;
    }
    interface LanderCard {
        "image": string;
        "meta": string;
        "metacolor": string;
        "text": string;
        "textcolor": string;
    }
    interface LanderColumn {
        "columns": string;
        "lg": string;
        "md": string;
        "padding": string;
        "sm": string;
        "xl": string;
    }
    interface LanderFooter {
    }
    interface LanderGrid {
    }
    interface LanderHeader {
    }
    interface LanderHeadline {
        "alignment": string;
        "color": string;
        "fontsize": string;
        "fontweight": string;
        "lineheight": string;
        "narrow": boolean;
        "padding": string;
    }
    interface LanderInput {
        "hint": string;
        "label": string;
        "placeholder": string;
        "type": string;
        "value": string;
    }
    interface LanderPage {
        "backgroundcolor": string;
        "backgroundimage": string;
    }
    interface LanderText {
        "alignment": string;
        "color": string;
        "fontsize": string;
        "fontweight": string;
        "narrow": boolean;
        "padding": string;
    }
}
declare global {
    interface HTMLLanderAnimateElement extends Components.LanderAnimate, HTMLStencilElement {
    }
    var HTMLLanderAnimateElement: {
        prototype: HTMLLanderAnimateElement;
        new (): HTMLLanderAnimateElement;
    };
    interface HTMLLanderBlockElement extends Components.LanderBlock, HTMLStencilElement {
    }
    var HTMLLanderBlockElement: {
        prototype: HTMLLanderBlockElement;
        new (): HTMLLanderBlockElement;
    };
    interface HTMLLanderButtonElement extends Components.LanderButton, HTMLStencilElement {
    }
    var HTMLLanderButtonElement: {
        prototype: HTMLLanderButtonElement;
        new (): HTMLLanderButtonElement;
    };
    interface HTMLLanderCardElement extends Components.LanderCard, HTMLStencilElement {
    }
    var HTMLLanderCardElement: {
        prototype: HTMLLanderCardElement;
        new (): HTMLLanderCardElement;
    };
    interface HTMLLanderColumnElement extends Components.LanderColumn, HTMLStencilElement {
    }
    var HTMLLanderColumnElement: {
        prototype: HTMLLanderColumnElement;
        new (): HTMLLanderColumnElement;
    };
    interface HTMLLanderFooterElement extends Components.LanderFooter, HTMLStencilElement {
    }
    var HTMLLanderFooterElement: {
        prototype: HTMLLanderFooterElement;
        new (): HTMLLanderFooterElement;
    };
    interface HTMLLanderGridElement extends Components.LanderGrid, HTMLStencilElement {
    }
    var HTMLLanderGridElement: {
        prototype: HTMLLanderGridElement;
        new (): HTMLLanderGridElement;
    };
    interface HTMLLanderHeaderElement extends Components.LanderHeader, HTMLStencilElement {
    }
    var HTMLLanderHeaderElement: {
        prototype: HTMLLanderHeaderElement;
        new (): HTMLLanderHeaderElement;
    };
    interface HTMLLanderHeadlineElement extends Components.LanderHeadline, HTMLStencilElement {
    }
    var HTMLLanderHeadlineElement: {
        prototype: HTMLLanderHeadlineElement;
        new (): HTMLLanderHeadlineElement;
    };
    interface HTMLLanderInputElement extends Components.LanderInput, HTMLStencilElement {
    }
    var HTMLLanderInputElement: {
        prototype: HTMLLanderInputElement;
        new (): HTMLLanderInputElement;
    };
    interface HTMLLanderPageElement extends Components.LanderPage, HTMLStencilElement {
    }
    var HTMLLanderPageElement: {
        prototype: HTMLLanderPageElement;
        new (): HTMLLanderPageElement;
    };
    interface HTMLLanderTextElement extends Components.LanderText, HTMLStencilElement {
    }
    var HTMLLanderTextElement: {
        prototype: HTMLLanderTextElement;
        new (): HTMLLanderTextElement;
    };
    interface HTMLElementTagNameMap {
        "lander-animate": HTMLLanderAnimateElement;
        "lander-block": HTMLLanderBlockElement;
        "lander-button": HTMLLanderButtonElement;
        "lander-card": HTMLLanderCardElement;
        "lander-column": HTMLLanderColumnElement;
        "lander-footer": HTMLLanderFooterElement;
        "lander-grid": HTMLLanderGridElement;
        "lander-header": HTMLLanderHeaderElement;
        "lander-headline": HTMLLanderHeadlineElement;
        "lander-input": HTMLLanderInputElement;
        "lander-page": HTMLLanderPageElement;
        "lander-text": HTMLLanderTextElement;
    }
}
declare namespace LocalJSX {
    interface LanderAnimate {
        "rotate"?: number;
        "type"?: string;
    }
    interface LanderBlock {
        "backgroundcolor"?: string;
        "backgroundimage"?: string;
        "columns"?: string;
        "height"?: string;
        "hint"?: string;
        "lg"?: string;
        "margin"?: string;
        "md"?: string;
        "narrow"?: boolean;
        "padding"?: string;
        "sm"?: string;
        "xl"?: string;
    }
    interface LanderButton {
        "colour"?: string;
        "onClicked"?: (event: CustomEvent<any>) => void;
        "onDoubleClicked"?: (event: CustomEvent<any>) => void;
        "outline"?: boolean;
        "size"?: string;
        "test"?: string;
    }
    interface LanderCard {
        "image"?: string;
        "meta"?: string;
        "metacolor"?: string;
        "text"?: string;
        "textcolor"?: string;
    }
    interface LanderColumn {
        "columns"?: string;
        "lg"?: string;
        "md"?: string;
        "padding"?: string;
        "sm"?: string;
        "xl"?: string;
    }
    interface LanderFooter {
    }
    interface LanderGrid {
    }
    interface LanderHeader {
    }
    interface LanderHeadline {
        "alignment"?: string;
        "color"?: string;
        "fontsize"?: string;
        "fontweight"?: string;
        "lineheight"?: string;
        "narrow"?: boolean;
        "padding"?: string;
    }
    interface LanderInput {
        "hint"?: string;
        "label"?: string;
        "onValueChange"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface LanderPage {
        "backgroundcolor"?: string;
        "backgroundimage"?: string;
    }
    interface LanderText {
        "alignment"?: string;
        "color"?: string;
        "fontsize"?: string;
        "fontweight"?: string;
        "narrow"?: boolean;
        "padding"?: string;
    }
    interface IntrinsicElements {
        "lander-animate": LanderAnimate;
        "lander-block": LanderBlock;
        "lander-button": LanderButton;
        "lander-card": LanderCard;
        "lander-column": LanderColumn;
        "lander-footer": LanderFooter;
        "lander-grid": LanderGrid;
        "lander-header": LanderHeader;
        "lander-headline": LanderHeadline;
        "lander-input": LanderInput;
        "lander-page": LanderPage;
        "lander-text": LanderText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "lander-animate": LocalJSX.LanderAnimate & JSXBase.HTMLAttributes<HTMLLanderAnimateElement>;
            "lander-block": LocalJSX.LanderBlock & JSXBase.HTMLAttributes<HTMLLanderBlockElement>;
            "lander-button": LocalJSX.LanderButton & JSXBase.HTMLAttributes<HTMLLanderButtonElement>;
            "lander-card": LocalJSX.LanderCard & JSXBase.HTMLAttributes<HTMLLanderCardElement>;
            "lander-column": LocalJSX.LanderColumn & JSXBase.HTMLAttributes<HTMLLanderColumnElement>;
            "lander-footer": LocalJSX.LanderFooter & JSXBase.HTMLAttributes<HTMLLanderFooterElement>;
            "lander-grid": LocalJSX.LanderGrid & JSXBase.HTMLAttributes<HTMLLanderGridElement>;
            "lander-header": LocalJSX.LanderHeader & JSXBase.HTMLAttributes<HTMLLanderHeaderElement>;
            "lander-headline": LocalJSX.LanderHeadline & JSXBase.HTMLAttributes<HTMLLanderHeadlineElement>;
            "lander-input": LocalJSX.LanderInput & JSXBase.HTMLAttributes<HTMLLanderInputElement>;
            "lander-page": LocalJSX.LanderPage & JSXBase.HTMLAttributes<HTMLLanderPageElement>;
            "lander-text": LocalJSX.LanderText & JSXBase.HTMLAttributes<HTMLLanderTextElement>;
        }
    }
}
